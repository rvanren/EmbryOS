.SUFFIXES:

YELLOW      = \033[1;33m
END         = \033[0m

CC          = riscv-none-elf-gcc
OBJDUMP     = riscv-none-elf-objdump
OBJCOPY     = riscv-none-elf-objcopy
NM          = riscv-none-elf-nm

LDFLAGS     = -nostdlib
DEBUG_FLAGS = --source --all-headers --demangle --line-numbers --wide

# CFLAGS_ARCH and QEMU are defined by Makefile.32 / Makefile.64
CFLAGS      = $(CFLAGS_ARCH) \
              -Wl,--gc-sections -ffunction-sections -fdata-sections \
              -fdiagnostics-show-option -fno-builtin

all:
	@printf "$(YELLOW)-------- Compile Hello, World! (RV$(XLEN)) --------$(END)\n"
	$(CC) $(CFLAGS) -Ishared -I. start.s trap.S hello.c kprintf.c frame.c io.c interrupt.c process.c sched.c screen.c apps/dir.c apps/init.c apps/splash.c apps/life.c -Thello.lds $(LDFLAGS) -o hello.elf
	$(OBJDUMP) $(DEBUG_FLAGS) hello.elf > hello.lst
	$(OBJCOPY) -O binary hello.elf hello.bin

qemu: all
	@printf "$(YELLOW)-------- Run Hello, World! on QEMU (RV$(XLEN)) --------$(END)\n"
	$(QEMU) -nographic -machine virt -smp 2 -bios default -kernel hello.bin
	@printf "$(END)\033[?25h\n"

clean:
	@printf "$(YELLOW)-------- clean (RV$(XLEN)) --------$(END)\n"
	rm -f hello.bin hello.lst hello.elf
